package com.project.ordermanagement.controller;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Locale;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.format.annotation.DateTimeFormat.ISO;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.project.ordermanagement.ErrorCodes;
import com.project.ordermanagement.exception.OrderNotFoundException;
import com.project.ordermanagement.model.Order;
import com.project.ordermanagement.service.OrderService;

import lombok.extern.slf4j.Slf4j;

@RestController
@Slf4j
@RequestMapping("/orders")
public class OrderController {
	
	@Autowired
	private OrderService orderService;
	@Autowired
	MessageSource message;
	
	@GetMapping
	public ResponseEntity<ArrayList<Order>> getOrders(){
		ArrayList<Order> orders = (ArrayList<Order>) orderService.retrieveOrders();
		log.debug("Orders returned {}", orders);
		return new ResponseEntity<ArrayList<Order>>(orders, HttpStatus.OK);
	}
	
	@GetMapping("/{orderId}")
	public ResponseEntity<Order> getOrderByOrderId(@PathVariable int orderId,Locale locale){
		Order order = orderService.retrieveOrderByOrderId(orderId);
		if(null!=order) {
			log.debug("Order retrieved for order Id {},{}", orderId,order);
			return new ResponseEntity<Order>(order, HttpStatus.OK);
		}else {
			log.debug("Order not found for order Id {}", orderId);
			throw new OrderNotFoundException(message.getMessage(ErrorCodes.ORDERNOTFOUND, null, locale));
	}
	}
	
	@GetMapping("/orderByName/{customerName}")
	public ResponseEntity<ArrayList<Order>> getOrderByCustomerName(@PathVariable String customerName,Locale locale){
		ArrayList<Order> order = (ArrayList<Order>) orderService.retrieveOrderItemByCustomerName(customerName);
		if(null!=order) {
			log.debug("Orders retrieved for customer {},{}", customerName,order);
			return new ResponseEntity<ArrayList<Order>>(order, HttpStatus.OK);
		}else {
			log.error("No orders placed for this customer {}",customerName);
			throw new OrderNotFoundException(message.getMessage(ErrorCodes.ORDERNOTFOUND, null, locale));
		}
	}
	
	@GetMapping("/orderByDate/{orderDate}")
	public ResponseEntity<ArrayList<Order>> getOrderByDate(@PathVariable @DateTimeFormat(iso = ISO.DATE) LocalDate orderDate,Locale locale){
		ArrayList<Order> order = (ArrayList<Order>) orderService.retrieveOrderByDate(orderDate);
		if(null!=order) {
			log.debug("Orders retrieved for date {},{}", orderDate,order);
			return new ResponseEntity<ArrayList<Order>>(order, HttpStatus.OK);
		}else {
			log.error("No orders placed on this date {}",orderDate);
			throw new OrderNotFoundException(message.getMessage(ErrorCodes.ORDERNOTFOUND, null, locale));
		}
	}
	
	@GetMapping("/orderCount")
	public ResponseEntity<?> getOrderCount(){
		return new ResponseEntity<>(orderService.orderCount(), HttpStatus.OK);
	}

}

